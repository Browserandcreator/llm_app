{"ast":null,"code":"var _jsxFileName = \"D:\\\\llm_app-1\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// App.js - 旅游规划应用的主组件文件\n// 该文件是整个前端应用的核心，负责管理应用状态、处理用户交互和组织UI布局\n\n// 导入React核心库和钩子函数\nimport React, { useState, useEffect } from 'react';\n\n// 导入Material UI主题相关组件\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport Box from '@mui/material/Box';\n\n// 导入自定义组件：侧边栏和聊天区域\nimport Sidebar from './components/Sidebar';\nimport ChatArea from './components/ChatArea';\nimport AuthModal from './components/AuthModal';\nimport UserProfile from './components/UserProfile';\n\n// 导入样式文件\nimport './App.css';\n\n// 导入UUID生成库，用于创建唯一标识符\nimport { v4 as uuidv4 } from 'uuid';\n\n// 创建应用主题，定义颜色方案\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: '#1976d2' // 主色调：蓝色\n    },\n    background: {\n      default: '#f5f5f5' // 背景色：浅灰色\n    }\n  }\n});\nfunction App() {\n  _s();\n  // 状态管理\n  // conversations: 存储所有对话数据的数组\n  const [conversations, setConversations] = useState([]);\n\n  // currentConversationId: 当前选中的对话ID\n  const [currentConversationId, setCurrentConversationId] = useState(null);\n\n  // isSidebarOpen: 侧边栏是否打开的状态\n  const [isSidebarOpen, setIsSidebarOpen] = useState(true);\n\n  // 用户认证相关状态\n  const [user, setUser] = useState(null);\n  const [isAuthModalOpen, setIsAuthModalOpen] = useState(false);\n\n  // 副作用钩子：检查用户登录状态\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    const userData = localStorage.getItem('user');\n    if (token && userData) {\n      try {\n        setUser(JSON.parse(userData));\n      } catch (error) {\n        console.error('解析用户数据失败:', error);\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n      }\n    }\n  }, []);\n\n  // 副作用钩子：在组件挂载或conversations变化时执行\n  useEffect(() => {\n    // 如果没有对话，则初始化一个新对话\n    if (conversations.length === 0) {\n      const newConversationId = uuidv4(); // 生成唯一ID\n      setConversations([{\n        id: newConversationId,\n        title: '新的旅游规划',\n        // 默认对话标题\n        messages: [] // 初始化空消息数组\n      }]);\n      setCurrentConversationId(newConversationId); // 设置为当前对话\n    }\n  }, [conversations]);\n\n  // 创建新对话的处理函数\n  const handleNewConversation = () => {\n    const newConversationId = uuidv4();\n    setConversations([...conversations, {\n      id: newConversationId,\n      title: '新的旅游规划',\n      messages: []\n    }]);\n    setCurrentConversationId(newConversationId); // 自动切换到新创建的对话\n  };\n\n  // 选择对话的处理函数\n  const handleSelectConversation = id => {\n    setCurrentConversationId(id);\n  };\n\n  // 删除对话的处理函数\n  const handleDeleteConversation = id => {\n    // 过滤掉要删除的对话\n    const updatedConversations = conversations.filter(conv => conv.id !== id);\n    setConversations(updatedConversations);\n\n    // 如果删除的是当前对话，则自动选择第一个对话或创建新对话\n    if (currentConversationId === id && updatedConversations.length > 0) {\n      setCurrentConversationId(updatedConversations[0].id);\n    } else if (updatedConversations.length === 0) {\n      handleNewConversation(); // 如果删除后没有对话，则创建一个新对话\n    }\n  };\n\n  // 发送消息的处理函数（异步）\n  const handleSendMessage = async message => {\n    // 验证消息不为空\n    if (!message.trim()) return;\n\n    // 查找当前对话\n    const currentConversation = conversations.find(conv => conv.id === currentConversationId);\n    if (!currentConversation) return;\n\n    // 创建用户消息对象\n    const userMessage = {\n      id: uuidv4(),\n      content: message,\n      sender: 'user',\n      // 标记为用户发送\n      timestamp: new Date().toISOString() // 记录发送时间\n    };\n\n    // 更新对话标题（如果是第一条消息）\n    let updatedTitle = currentConversation.title;\n    if (currentConversation.messages.length === 0) {\n      // 截取消息前20个字符作为标题，过长则添加省略号\n      updatedTitle = message.length > 20 ? `${message.substring(0, 20)}...` : message;\n    }\n\n    // 更新对话列表，添加用户消息\n    const updatedConversations = conversations.map(conv => {\n      if (conv.id === currentConversationId) {\n        return {\n          ...conv,\n          title: updatedTitle,\n          messages: [...conv.messages, userMessage]\n        };\n      }\n      return conv;\n    });\n    setConversations(updatedConversations);\n    try {\n      // 创建并显示\"加载中\"消息\n      const loadingMessageId = uuidv4();\n      const loadingMessage = {\n        id: loadingMessageId,\n        content: '思考中...',\n        sender: 'assistant',\n        // 标记为助手发送\n        isLoading: true,\n        // 标记为加载状态\n        timestamp: new Date().toISOString()\n      };\n\n      // 将加载消息添加到当前对话\n      setConversations(prevConversations => {\n        return prevConversations.map(conv => {\n          if (conv.id === currentConversationId) {\n            return {\n              ...conv,\n              messages: [...conv.messages, loadingMessage]\n            };\n          }\n          return conv;\n        });\n      });\n\n      // 调用后端API获取回复\n      const headers = {\n        'Content-Type': 'application/json'\n      };\n\n      // 如果用户已登录，添加认证头\n      const token = localStorage.getItem('token');\n      if (token) {\n        headers['Authorization'] = `Bearer ${token}`;\n      }\n      const response = await fetch('/api/chat', {\n        method: 'POST',\n        headers,\n        body: JSON.stringify({\n          message,\n          // 当前消息\n          conversationId: currentConversationId,\n          // 对话ID\n          messages: updatedConversations.find(conv => conv.id === currentConversationId).messages // 对话历史\n        })\n      });\n\n      // 检查响应状态\n      if (!response.ok) {\n        throw new Error('网络请求失败');\n      }\n\n      // 解析响应数据\n      const data = await response.json();\n\n      // 创建助手回复消息，替换加载中消息\n      const assistantMessage = {\n        id: uuidv4(),\n        content: data.reply,\n        // 使用API返回的回复内容\n        sender: 'assistant',\n        timestamp: new Date().toISOString()\n      };\n\n      // 更新对话，将加载消息替换为实际回复\n      setConversations(prevConversations => {\n        return prevConversations.map(conv => {\n          if (conv.id === currentConversationId) {\n            return {\n              ...conv,\n              messages: conv.messages.map(msg => msg.id === loadingMessageId ? assistantMessage : msg)\n            };\n          }\n          return conv;\n        });\n      });\n    } catch (error) {\n      // 错误处理\n      console.error('Error sending message:', error);\n\n      // 将加载消息更新为错误消息\n      setConversations(prevConversations => {\n        return prevConversations.map(conv => {\n          if (conv.id === currentConversationId) {\n            return {\n              ...conv,\n              messages: conv.messages.map(msg => {\n                if (msg.isLoading) {\n                  return {\n                    ...msg,\n                    content: '抱歉，处理您的请求时出现错误。请稍后再试。',\n                    isLoading: false,\n                    isError: true // 标记为错误状态\n                  };\n                }\n                return msg;\n              })\n            };\n          }\n          return conv;\n        });\n      });\n    }\n  };\n\n  // 切换侧边栏显示/隐藏的函数\n  const toggleSidebar = () => {\n    setIsSidebarOpen(!isSidebarOpen);\n  };\n\n  // 处理用户登录成功\n  const handleLoginSuccess = (userData, token) => {\n    setUser(userData);\n    localStorage.setItem('token', token);\n    localStorage.setItem('user', JSON.stringify(userData));\n    setIsAuthModalOpen(false);\n  };\n\n  // 处理用户登出\n  const handleLogout = () => {\n    setUser(null);\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  };\n\n  // 获取当前对话，如果不存在则提供默认值\n  const currentConversation = conversations.find(conv => conv.id === currentConversationId) || {\n    messages: []\n  };\n\n  // 渲染应用界面\n  return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n    theme: theme,\n    children: [/*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(Box, {\n      className: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        className: \"app-header\",\n        children: user ? /*#__PURE__*/_jsxDEV(UserProfile, {\n          user: user,\n          onLogout: handleLogout\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"login-button\",\n          onClick: () => setIsAuthModalOpen(true),\n          children: \"\\u767B\\u5F55 / \\u6CE8\\u518C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        className: \"app-main\",\n        children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n          conversations: conversations // 所有对话\n          ,\n          currentConversationId: currentConversationId // 当前对话ID\n          ,\n          onNewConversation: handleNewConversation // 新建对话处理函数\n          ,\n          onSelectConversation: handleSelectConversation // 选择对话处理函数\n          ,\n          onDeleteConversation: handleDeleteConversation // 删除对话处理函数\n          ,\n          isOpen: isSidebarOpen // 侧边栏开关状态\n          ,\n          toggleSidebar: toggleSidebar // 切换侧边栏函数\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ChatArea, {\n          messages: currentConversation.messages // 当前对话的消息列表\n          ,\n          onSendMessage: handleSendMessage // 发送消息处理函数\n          ,\n          isSidebarOpen: isSidebarOpen // 侧边栏状态（用于响应式布局）\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 9\n      }, this), isAuthModalOpen && /*#__PURE__*/_jsxDEV(AuthModal, {\n        isOpen: isAuthModalOpen,\n        onClose: () => setIsAuthModalOpen(false),\n        onLoginSuccess: handleLoginSuccess\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 277,\n    columnNumber: 5\n  }, this);\n}\n\n// 导出App组件\n_s(App, \"c91EZgxFibBvCrTi+IN0Phkq2BA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ThemeProvider","createTheme","CssBaseline","Box","Sidebar","ChatArea","AuthModal","UserProfile","v4","uuidv4","jsxDEV","_jsxDEV","theme","palette","primary","main","background","default","App","_s","conversations","setConversations","currentConversationId","setCurrentConversationId","isSidebarOpen","setIsSidebarOpen","user","setUser","isAuthModalOpen","setIsAuthModalOpen","token","localStorage","getItem","userData","JSON","parse","error","console","removeItem","length","newConversationId","id","title","messages","handleNewConversation","handleSelectConversation","handleDeleteConversation","updatedConversations","filter","conv","handleSendMessage","message","trim","currentConversation","find","userMessage","content","sender","timestamp","Date","toISOString","updatedTitle","substring","map","loadingMessageId","loadingMessage","isLoading","prevConversations","headers","response","fetch","method","body","stringify","conversationId","ok","Error","data","json","assistantMessage","reply","msg","isError","toggleSidebar","handleLoginSuccess","setItem","handleLogout","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onLogout","onClick","onNewConversation","onSelectConversation","onDeleteConversation","isOpen","onSendMessage","onClose","onLoginSuccess","_c","$RefreshReg$"],"sources":["D:/llm_app-1/frontend/src/App.js"],"sourcesContent":["// App.js - 旅游规划应用的主组件文件\n// 该文件是整个前端应用的核心，负责管理应用状态、处理用户交互和组织UI布局\n\n// 导入React核心库和钩子函数\nimport React, { useState, useEffect } from 'react'; \n\n// 导入Material UI主题相关组件\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport Box from '@mui/material/Box';\n\n// 导入自定义组件：侧边栏和聊天区域\nimport Sidebar from './components/Sidebar';\nimport ChatArea from './components/ChatArea';\nimport AuthModal from './components/AuthModal';\nimport UserProfile from './components/UserProfile';\n\n// 导入样式文件\nimport './App.css';\n\n// 导入UUID生成库，用于创建唯一标识符\nimport { v4 as uuidv4 } from 'uuid';\n\n// 创建应用主题，定义颜色方案\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: '#1976d2', // 主色调：蓝色\n    },\n    background: {\n      default: '#f5f5f5', // 背景色：浅灰色\n    },\n  },\n});\n\nfunction App() {\n  // 状态管理\n  // conversations: 存储所有对话数据的数组\n  const [conversations, setConversations] = useState([]);\n  \n  // currentConversationId: 当前选中的对话ID\n  const [currentConversationId, setCurrentConversationId] = useState(null);\n  \n  // isSidebarOpen: 侧边栏是否打开的状态\n  const [isSidebarOpen, setIsSidebarOpen] = useState(true);\n  \n  // 用户认证相关状态\n  const [user, setUser] = useState(null);\n  const [isAuthModalOpen, setIsAuthModalOpen] = useState(false);\n\n  // 副作用钩子：检查用户登录状态\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    const userData = localStorage.getItem('user');\n    if (token && userData) {\n      try {\n        setUser(JSON.parse(userData));\n      } catch (error) {\n        console.error('解析用户数据失败:', error);\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n      }\n    }\n  }, []);\n\n  // 副作用钩子：在组件挂载或conversations变化时执行\n  useEffect(() => {\n    // 如果没有对话，则初始化一个新对话\n    if (conversations.length === 0) {\n      const newConversationId = uuidv4(); // 生成唯一ID\n      setConversations([{\n        id: newConversationId,\n        title: '新的旅游规划', // 默认对话标题\n        messages: [] // 初始化空消息数组\n      }]);\n      setCurrentConversationId(newConversationId); // 设置为当前对话\n    }\n  }, [conversations]);\n\n  // 创建新对话的处理函数\n  const handleNewConversation = () => {\n    const newConversationId = uuidv4();\n    setConversations([...conversations, {\n      id: newConversationId,\n      title: '新的旅游规划',\n      messages: []\n    }]);\n    setCurrentConversationId(newConversationId); // 自动切换到新创建的对话\n  };\n\n  // 选择对话的处理函数\n  const handleSelectConversation = (id) => {\n    setCurrentConversationId(id);\n  };\n\n  // 删除对话的处理函数\n  const handleDeleteConversation = (id) => {\n    // 过滤掉要删除的对话\n    const updatedConversations = conversations.filter(conv => conv.id !== id);\n    setConversations(updatedConversations);\n    \n    // 如果删除的是当前对话，则自动选择第一个对话或创建新对话\n    if (currentConversationId === id && updatedConversations.length > 0) {\n      setCurrentConversationId(updatedConversations[0].id);\n    } else if (updatedConversations.length === 0) {\n      handleNewConversation(); // 如果删除后没有对话，则创建一个新对话\n    }\n  };\n\n  // 发送消息的处理函数（异步）\n  const handleSendMessage = async (message) => {\n    // 验证消息不为空\n    if (!message.trim()) return;\n\n    // 查找当前对话\n    const currentConversation = conversations.find(conv => conv.id === currentConversationId);\n    if (!currentConversation) return;\n\n    // 创建用户消息对象\n    const userMessage = {\n      id: uuidv4(),\n      content: message,\n      sender: 'user', // 标记为用户发送\n      timestamp: new Date().toISOString() // 记录发送时间\n    };\n\n    // 更新对话标题（如果是第一条消息）\n    let updatedTitle = currentConversation.title;\n    if (currentConversation.messages.length === 0) {\n      // 截取消息前20个字符作为标题，过长则添加省略号\n      updatedTitle = message.length > 20 ? `${message.substring(0, 20)}...` : message;\n    }\n\n    // 更新对话列表，添加用户消息\n    const updatedConversations = conversations.map(conv => {\n      if (conv.id === currentConversationId) {\n        return {\n          ...conv,\n          title: updatedTitle,\n          messages: [...conv.messages, userMessage]\n        };\n      }\n      return conv;\n    });\n\n    setConversations(updatedConversations);\n\n    try {\n      // 创建并显示\"加载中\"消息\n      const loadingMessageId = uuidv4();\n      const loadingMessage = {\n        id: loadingMessageId,\n        content: '思考中...',\n        sender: 'assistant', // 标记为助手发送\n        isLoading: true, // 标记为加载状态\n        timestamp: new Date().toISOString()\n      };\n\n      // 将加载消息添加到当前对话\n      setConversations(prevConversations => {\n        return prevConversations.map(conv => {\n          if (conv.id === currentConversationId) {\n            return {\n              ...conv,\n              messages: [...conv.messages, loadingMessage]\n            };\n          }\n          return conv;\n        });\n      });\n\n      // 调用后端API获取回复\n      const headers = {\n        'Content-Type': 'application/json',\n      };\n      \n      // 如果用户已登录，添加认证头\n      const token = localStorage.getItem('token');\n      if (token) {\n        headers['Authorization'] = `Bearer ${token}`;\n      }\n      \n      const response = await fetch('/api/chat', {\n        method: 'POST',\n        headers,\n        body: JSON.stringify({\n          message, // 当前消息\n          conversationId: currentConversationId, // 对话ID\n          messages: updatedConversations.find(conv => conv.id === currentConversationId).messages // 对话历史\n        }),\n      });\n\n      // 检查响应状态\n      if (!response.ok) {\n        throw new Error('网络请求失败');\n      }\n\n      // 解析响应数据\n      const data = await response.json();\n\n      // 创建助手回复消息，替换加载中消息\n      const assistantMessage = {\n        id: uuidv4(),\n        content: data.reply, // 使用API返回的回复内容\n        sender: 'assistant',\n        timestamp: new Date().toISOString()\n      };\n\n      // 更新对话，将加载消息替换为实际回复\n      setConversations(prevConversations => {\n        return prevConversations.map(conv => {\n          if (conv.id === currentConversationId) {\n            return {\n              ...conv,\n              messages: conv.messages.map(msg => \n                msg.id === loadingMessageId ? assistantMessage : msg\n              )\n            };\n          }\n          return conv;\n        });\n      });\n    } catch (error) {\n      // 错误处理\n      console.error('Error sending message:', error);\n      \n      // 将加载消息更新为错误消息\n      setConversations(prevConversations => {\n        return prevConversations.map(conv => {\n          if (conv.id === currentConversationId) {\n            return {\n              ...conv,\n              messages: conv.messages.map(msg => {\n                if (msg.isLoading) {\n                  return {\n                    ...msg,\n                    content: '抱歉，处理您的请求时出现错误。请稍后再试。',\n                    isLoading: false,\n                    isError: true // 标记为错误状态\n                  };\n                }\n                return msg;\n              })\n            };\n          }\n          return conv;\n        });\n      });\n    }\n  };\n\n  // 切换侧边栏显示/隐藏的函数\n  const toggleSidebar = () => {\n    setIsSidebarOpen(!isSidebarOpen);\n  };\n  \n  // 处理用户登录成功\n  const handleLoginSuccess = (userData, token) => {\n    setUser(userData);\n    localStorage.setItem('token', token);\n    localStorage.setItem('user', JSON.stringify(userData));\n    setIsAuthModalOpen(false);\n  };\n  \n  // 处理用户登出\n  const handleLogout = () => {\n    setUser(null);\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  };\n\n  // 获取当前对话，如果不存在则提供默认值\n  const currentConversation = conversations.find(conv => conv.id === currentConversationId) || { messages: [] };\n\n  // 渲染应用界面\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline /> {/* 重置CSS基础样式 */}\n      <Box className=\"app-container\">\n        {/* 顶部用户认证区域 */}\n        <Box className=\"app-header\">\n          {user ? (\n            <UserProfile \n              user={user}\n              onLogout={handleLogout}\n            />\n          ) : (\n            <button \n              className=\"login-button\"\n              onClick={() => setIsAuthModalOpen(true)}\n            >\n              登录 / 注册\n            </button>\n          )}\n        </Box>\n        \n        {/* 主内容区域 */}\n        <Box className=\"app-main\">\n          {/* 侧边栏组件 */}\n          <Sidebar \n            conversations={conversations} // 所有对话\n            currentConversationId={currentConversationId} // 当前对话ID\n            onNewConversation={handleNewConversation} // 新建对话处理函数\n            onSelectConversation={handleSelectConversation} // 选择对话处理函数\n            onDeleteConversation={handleDeleteConversation} // 删除对话处理函数\n            isOpen={isSidebarOpen} // 侧边栏开关状态\n            toggleSidebar={toggleSidebar} // 切换侧边栏函数\n          />\n          {/* 聊天区域组件 */}\n          <ChatArea \n            messages={currentConversation.messages} // 当前对话的消息列表\n            onSendMessage={handleSendMessage} // 发送消息处理函数\n            isSidebarOpen={isSidebarOpen} // 侧边栏状态（用于响应式布局）\n          />\n        </Box>\n        \n        {/* 认证模态框 */}\n        {isAuthModalOpen && (\n          <AuthModal \n            isOpen={isAuthModalOpen}\n            onClose={() => setIsAuthModalOpen(false)}\n            onLoginSuccess={handleLoginSuccess}\n          />\n        )}\n      </Box>\n    </ThemeProvider>\n  );\n}\n\n// 导出App组件\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}